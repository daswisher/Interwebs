<b>Beginners Module Development</b>
Hooks are functions called during execution
Module changes to content/functionality with hooks

Hook tools:
hook_init()
hook_form_alter()

hook_menu()
hook_node_presave()
hook_form_FORM_ID_alter()
hook_form_BASE_FORM_ID_alter()

"Every time you hack core. God kills a kitten"
Kill all kittens!!!

Modules directory is where core modules exist.
Put custom modules in new contrib/custom modules directory in sites/all/modules

Search drupal before developing a module for reference
Check irc for help

Always clear cache (use drush aka drupal shell)
//Modules use php
function(){
	/*
	dnp(arg);
	dpn("You are on the config page");
	*/
	$args = arg();	
	dpn($form);//This will print everything from the form
	//PHP always passes objects in by refernce so it's unnecessary to use the ampersand in the paramters to pass it in by reference
	//This is to add js/jQuery
	$path = drupal_get_path('<module>','<module>');
	drupal_add_js($path '<file with the javascript>');//JS can be added in the .info file instead of the module
}

<b>Lean Drupal Markup</b>

Clean writing allows for efficiency, speed, easier to read writing
/*
This session goes over cleaning up the following:
Fields 
Views
Panels
*/
Fields
Use the fences module (eliminates field wrappers)
	Fences
	
Use Views (Also eliminates wrappers/and cuts down on the number of classes that drupal associates with some of the wrappers)
	Take off default drupal values to cut div layers

Removing div layers increases efficiency and improves readability by users and bots by improving general semantics

Panels
	Never use the flexible panel builder because it uses an excessive number of div wrappers
	Clean markup or foundation is ideal <<still need to cleanup the wrappers>>
		Change the style options <<clean panel is nice as well as no mark up at all>>
tl;dr:
Eliminate as many wrappers and class calls as possible to improve site responsiveness/speed
ALWAYS CLEAR CACHE AFTER ANY MODIFICATION!

<b>Intro to Views</b>
Things drupal can't do:
	display: page/block/rss
	format: table/grid/slideshow
	fields: author/date/terms
	filter:only certain types
	sort: alphabetical/by hits/most comments

<b>Data Analytics and the Day After</b>
Use information/data analytics/data science to optimize websites
Gather statistics on male/female ratios, age groups
It's difficult to determine website optimization ROI (return of investment)
	Beat this by establish a baseline (ie monitor when new customers start using their account or when people start working with their new cards)
	Standardize metrics (traffic/time or traffic/dollar spent)
	Automate workflow/visuals/metrics
Generate feedback about system
	surveys
	feedback
	direct contact
	user activity
	usability tests
Try to maximize sample test group size
Create a logging system
	Be decisive about what information you store
		makes it easier to sort and investigate
	look for oddities in data to differentiate visitors
capture behaviors
	google analytics-takes all data
	KISSmetrics-session data
	Mixpanel-session data
	Custom event logger-helps you get the data you're looking for
Custom logger
	timestamp, event name/value, uid, url, session_id
Reasons for custom
	php == more reliable than js
	track across multiple channels (i.e email, sms, etc)
Cons of custom
	session cookies cost to implement for each user
Workaround cons
	use some js
	buy more servers
	use big data storage
Performance
	handles over 3 million user events daily
	check user agents
	check what bots are doing
***Note: build your business off of brands people already know/love***
	card.com uses seasame street as a custom card photo/design
Analyze customer usage to determine how well features are being advertised
	Use targeted advertisements to redirect customers
R is good for data analytics
	good for dataset manipulation
	built-in statistic tools
	open-source
	seamless integration to hadoop
ggplot for visual plots (great graphics library)
schedule reporting
	script it to report on a regular and visual
	jenkins does archiving,cleaning,reporting
other logs
	php error/apache error/drupal (watchdog)/any other system monitors
	Use to correlate and find bugs/issues in system
review data collection on a weekly basis to determine if you're getting what you need or if you need to change the system that has been implemented

<b>Getting SASS-y with Foundation</b>
Requirements
http://git-scm.com/
node.js
ruby
bundler(a package manager)

install drupal.org/project/zurb_foundation to sites/all/themes
install and update jQuery

monitor compass
sass (scss files) allow for nesting 
	Example:
	ul{
		/*stuff*/
	}
	ul li{
		/*more stuff*/
	}

	would be
	ul{
		/*stuff*/
		li{
			/*more stuff*/
		}
	}
***Note: sass also allows for verbal modifications on colors***
Example:
	background-color: $site_color;
	color: $darker_site_color;

	would be

	background-color: $site_color;
	color: darken($site_color, 10%);

***GET CODEKIT IT RUNS COMPASS EVERYTIME A FILE IS SAVED***

